#!/usr/bin/env python

import numpy as np
import MDAnalysis as mda
import sys
import getopt
import matplotlib.pyplot as pyp


instructions = "This program will print the angles between the z axis and one or two vectors specified by the user. vec1 and vec2 are specified giving the a couple of atoms \"A1 A2\" that defines the vector. The program is invoked as:  \n" + sys.argv[0] + "  --vec1=\"A1 A2\" --vec2=\"A3 A4\" -s file.tpr -f traj.xtc -o outputname\n \n This will generate a file angles_outputname.dat that contains the angles vs time and a angles_outputname.png which plots them vs time"
print("\n")
print(instructions)
print("\n")

try:
    options, files = getopt.getopt(sys.argv[1:], 's:f:o:',['vec1=','vec2=','s=','f=','o='])  	#here i read the options and assign the values to the "options" variable  
except getopt.GetoptError:
    print("\n")
    sys.stderr.write("Error: you probably inserted a flag that isn't there or some files are missing")
    print("\n")
    raise SystemExit

for opt, val in options:  						#here i assign each option to a variable to use in the script	
    
    if opt == '--vec1':
        vec1=val
            
    if opt == '--vec2':
        vec2=val
    
    if opt == '-s':
        topol=val.lstrip()
    
    if opt == '-f':
        traj=val.lstrip()
    
    if opt == '-o':
	outputname=val.lstrip()

u=mda.Universe(topol, traj)
Angle1=[]
Angle2=[]
Ts=[]

f=open(outputname+".dat", 'a')                     #open the file with append option

for ts in u.trajectory:
  pos6=np.array(list(u.select_atoms("bynum "+str(vec1)).positions[0]))  #select the atoms
  pos10=np.array(list(u.select_atoms("bynum "+str(vec1)).positions[1])) 
  pos7=np.array(list(u.select_atoms("bynum "+str(vec2)).positions[0]))
  pos15=np.array(list(u.select_atoms("bynum "+str(vec2)).positions[1]))
  #print(pos6)
  vec_z= np.array([0,0,1])                              #define z axis and vec1
  vec_1= np.array(pos10 - pos6)                         #i now need a vec perpendicular to vec6-10 and to vec7-15
  vec_temp= np.array(pos15 - pos7)                      #define a temporary vec7-15 for the cross product to find vec_2 
  vec_2= np.cross(vec_1,vec_temp)                       #->remember here that a x b =! b x a, b x a = -a x b. So this vector should be pointing INTO the plane of the molecule
  norm_vec_z= np.sqrt(np.dot(vec_z, vec_z))             #the norms are for calculating the angles 
  norm_vec_1= np.sqrt(np.dot(vec_1, vec_1))
  norm_vec_2= np.sqrt(np.dot(vec_2, vec_2))
  angle_1=np.rad2deg(np.arccos((np.dot(vec_1,vec_z))/(norm_vec_1*norm_vec_z))) #angles are calculated with the formula
  angle_2=np.rad2deg(np.arccos((np.dot(vec_2,vec_z))/(norm_vec_2*norm_vec_z))) #to find an angle between 2 vectors
  Angle1.append(angle_1)
  Angle2.append(angle_2)
  Ts.append(ts.time)
  if ts.time == 0 :                            #if its the first step it empties the file
    f.seek(0)                                  #with this
    f.truncate()                               #and this line
    f.write("### This file was generated by the invoking: angles_computer_python_1.1.py --vec1= %s --vec2= %s  -s %s -f %s -o %s  \n \n" % (vec1, vec2, topol , traj , outputname)) #spaces are just left inbetween 
  f.write("%s   %s   %s\n" % (int(ts.time), float(angle_1), float(angle_2))) #spaces are just left inbetween 

f.close 



##PLOT THE GRAPH
x_max=max(Ts)
x_min=0
y_max=180
y_min=0

pyp.figure(figsize=(8,8))						#resolution adjusting
pyp.plot(Ts[0:],Angle1[0:], label="angle1("+vec1+")")			#plot angle 1 and angle 2, separtely cause else it creates trouble
pyp.plot(Ts[0:],Angle2[0:], label="angle2("+"_|_ to (6 10) & (7 15)"+")")
#pyp.legend(loc='upper right')
pyp.legend(bbox_to_anchor=(0, 1.01), loc='lower left',ncol=2)			#https://stackoverflow.com/questions/4700614/how-to-put-the-legend-out-of-the-plot/43439132#43439132
axes=pyp.gca()								#axis magic, just copy this 3 lines
axes.set_xlim(x_min, x_max)
axes.set_ylim(y_min, y_max)
pyp.suptitle('Teta and Phi vs z_axis',fontsize=20)
pyp.xlabel('Time (ps)',fontsize=16)
pyp.ylabel('Angle (deg)',fontsize=16)
pyp.savefig(outputname+".png")			#saves the figure
